/*
 * 변수						연산자 / 제어문			화면 출력
 * 	|                            |                 |
 *  |                       변수에 대한 연산 처리    가공된 데이터 출력
 * 데이터 저장 방법 (메모리)      메소드				
 * 	=> 한 개 : 변수            데이터 가공
 *     ---------- 기본형 (이미 저장된 메모리 크기)
 * 	=> 같은 데이터 여러 개 : 배열
 * 	=> 다른 데이터 여러 개 : 클래스
 * 	   ---------------------- 참조형 (개발자가 지정)
 * 변수 / 메소드 / 화면 출력
 * -------------------- 클래스
 *                      ---- 관련된 클래스 묶음 : 패키지
 *                      
 * 1) 구성 요소
 * 2) 패키지
 * 3) 접근지정어
 * ---------- 변수의 초기화
 * 
 * 기본
 * 	의뢰 ==> 요구사항 분석 ==> 데이터 설계 ==> 구현 ==> 테스팅 ==> 배포
 * 	-----------------      --------     ---     ----     ----
 *         PM                 DBA     프로그래머   테스터     운영
 *          |                            |객체 생성          |호출
 *         설계                           -------------------
 *                                                |
 *                                              DevOps
 * 객체지향의 목적
 * -----------
 * 1) 유지보수 : 수정 시 영향을 최소화
 *     **다른 클래스의 영향이 없게 구현
 *       결합성이 낮은 프로그램
 *       인터페이스 ==> 스프링
 * 2) 재사용의 목적 : 상속(is-a) / 포함(has-a)
 * 3) 확장성 높은 프로그램 => 추가 / 수정
 *           |           --------- 다형성
 *         호환성 (운영체제의 독립성)               
 * 4) 코드 가독성 증가 (코드가 간결)
 *    ------------
 *    | 검증된 소스를 사용하기 때문에 신뢰성이 뛰어나다
 *      -------- 라이브러리       
 * 5) 데이터를 보호 : 캡슐화 
 * 
 * ---------------------------------------------------
 * 1. 캡슐화 : 접근지정어 => 접근 범위
 *    ---- 변수와 관련
 *    접근지정어 : private / protected / default / public
 * 2. 재사용 : 상속 / 포함
 *            |     |기존의 클래스를 있는 그대로 사용
 *           기존의 클래스를 확장해서 사용 (extends)
 *                       --- 변경을 해서 사용
 * 3. 수정(오버라이딩) / 추가(오버로딩) : 다형성 
 * 4. 추상화
 * 		=> 공통모듈 => 소스가 간결해진다
 * 		=> 추상 클래스 / 인터페이스(추상 클래스의 확장)
 * --------------------------------------------------- 객체지향의 4대 요소
 * 
 * 객체 지향 제작
 * -----------
 * 클래스 : 데이터를 여러 개 묶어서 메모리에 한 번 저장하기 위한 설계
 *        ------------- 관련된 데이터를 묶는다
 *         맛집 / 게시판 / 영화 / 음악 / 레시피 / 캠핑 / 쇼핑몰 ... 
 * ------------------------------------------------
 * 클래스의 구성 요소
 * --------------
 *  데이터 저장 : 변수
 *  데이터 활용 : 메소드
 *  데이터 주입(초기화) : 생성자
 *  
 *  1) 변수
 *  	인스턴스 변수***
 *  		=> 저장되는 시점 : new를 사용해야 저장된다
 *  		=> 객체마다 따로 생성되는 메모리
 *  		=> 힙 메모리에 저장
 *  		=> 프로그램 종료 시점까지 유지
 *  		=> 전역 변수(클래스 전체에서 사용하는 변수)
 *  	정적 변수
 *  		=> 저장되는 시점 : 컴파일 시에 저장 (자동 저장)
 *  		=> 메모리 공간을 1개만 사용
 *  		=> MethodArea에 저장
 *  		=> 공통으로 사용되는 변수가 있는 경우
 *  			= 데이터베이스 (오라클, MySQL) => 공유변수
 *  			= 로고
 *  	지역 변수
 *  		=> 저장되는 시점 : 메소드 호출
 *  		=> 메소드가 종료 시에 자동 회수
 *  		=> 스택 공간에 저장
 *  		=> 주로 메소드에서 사용
 *  		=> 유사한 변수 : 매개변수
 * ------------------------------------------------ 		
 * 1. 선언 위치
 * 		class ClassName{
 * 		---------------
 * 		인스턴스 / 정적변수
 * 		---------------
 * 		메소드
 * 			=> 지역변수
 * 		---------------
 * 		}
 * 2. 저장 위치
 * 		인스턴스 : Heap
 * 		정적변수 : MethodArea
 * 		지역변수 : 메소드
 * 3. 생명 주기
 * 		인스턴스 : Heap
 * 		정적변수 : MethodArea
 * 		------------------- 프로그램 종료 시까지
 * 		지역변수 : 메소드
 * 		------------- 메소드 종료 시까지 사용
 * 	*** 인스턴스변수
 * 		=> 객체명.변수명
 * 		=> 클래스 블록 내부에서 선언
 * 		=> 자동 초기화
 * 			int => 0
 * 			double => 0.0
 * 			long => 0L
 * 			boolean => false
 * 			char => '\0'
 * 			String => null
 * 		=> 초기화
 * 			1) ***명시적인 초기화
 * 			2) 초기화 블록
 * 			3) 생성자 : 변수 초기화를 담당하는 역할
 * 		*** 클래스 블록
 * 		class ClassName
 * 		{
 * 			구현은 할 수 없고 선언만 가능
 *          --- 연산자 / 제어문
 *          --- 파일 읽기, 데이터 연결, 서버 연결
 *          int a=10; => 기능 (명시적 초기화)
 *          int b;
 *          b=20; => 구현 (오류)
 *          
 *          ==> 자동 로그인 / 아이디 읽기 / 파일 읽기
 * 		}
 * 	*** 정적변수
 * 		=> 클래스명.변수명 => static
 * 		class ClassName
 * 		{
 * 			static int a; => 0값 초기화
 * 			=> static int a=10; => 명시적인 초기화
 * 		}
 * 		=> static은 공유
 * 			static은 static만 호출이 가능
 * 			=> 인스턴스를 호출 시에는 반드시 클래스 메모리 할당
 * 	*** 지역변수 : 메소드 안에서만 사용 가능 => 변수명
 * 	*** 지역변수 우선 순위
 * 		-------------
 * 		=> 메소드, 생성자, 블록 내부에서 선언
 * 		=> 반드시 초기화 후에 사용
 * 		=> 메소드 실행이 끝나면 자동 소멸
 * 	*** 프로그램에서 계속 유지해야 되는 변수
 * 		--------------------------- 인스턴스, 정적 변수
 *                                     |       |
 *                                  따로 저장 한 개 사용
 *  *** 사용 후에 버리는 경우 : 지역변수
 *  	반복문 
 */
public class 클래스구성요소_변수 {
	static int a=10;
	int b=20;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(a);
		클래스구성요소_변수 aa=new 클래스구성요소_변수();
		// aa => b
		System.out.println(aa.b);
	}

}
